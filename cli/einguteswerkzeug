#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
einguteswerkzeug - converts image into polaroid style and/or does phonky generative art

Usage:
egw <source-image> [--output=<filename>]
egw <source-image> [-o=<filename>] [--title=<str>] [--title-meta] [--font=<f>] [--filter=<str>] [--params-filter=<pydict>] [--noframe] [--nopolaroid] [--border-size=<float>] [--border-color=<tuple>] [--alpha-blend=<f>]
egw <source-image> [-o=<fn>] [--template=<str>] [--config=<str>] [--crop] [--alignment=<str>] [--filter=<str>] [--title=<str>] [--params-filter=<pydict>] [--noframe] [--nopolaroid] [--border-size=<float>] [--border-color=<tuple>] [--alpha-blend=<f>]
egw <source-image> [-o=<fn>] [--nocrop] [--crop] [--alignment=<str>] [--size-inner=<n>] [--max-size=<w>] [--template=<str>] [--config=<str>] [--title=<str>][--title-meta] [--filter=<str>] [--params-filter=<pydict>] [--params-generator=<pydict>] [--no-frame] [--nopolaroid] [--border-size=<float>] [--border-color=<tuple>] [--alpha-blend=<f>]
egw <source-image> [-o=<fn>] [--template=<str>] [--config=<str>] [--title=<str>][--title-meta] [--font=<f>] [--size-inner=<n>] [--max-size=<w>] [--filter=<str>] [--params-filter=<pydict>] [--params-generator=<pydict>] [--noframe] [--nopolaroid] [--border-size=<float>] [--border-color=<tuple>] [--alpha-blend=<f>]
egw <source-image> [-o=<fn>] [--size-inner=<n>] [--alignment=<str>] [--title=<str>][--title-meta] [-f=<f>] [--template=<str>] [-c=<str>] [-m=<w>] [--filter=<str>] [--params-filter=<pydict>] [--params-generator=<pydict>] [--noframe] [--nopolaroid] [--border-size=<float>] [--border-color=<tuple>] [--alpha-blend=<f>]
egw <source-image> [--nocrop] [--crop] [--alignment=<str>] [--title=<str>] [--title-meta] [-f=<str>] [-s=<n>] [-o=<filename>] [--template=<str>] [--config=<str>] [--max-size=<w>] [--filter=<str>] [--params-filter=<pydict>] [--params-generator=<pydict>] [--noframe] [--nopolaroid] [--border-size=<float>] [--border-color=<tuple>] [--alpha-blend=<f>]
egw <source-image> [--clockwise|--anticlock] [--nocrop|--crop] [--title=<str>] [--title-meta] [-f=<f>] [-s=<n>] [-o=<fn>] [--alignment=<str>] [--template=<str>] [-config=<str>] [-m=<w>] [--title-meta] [--filter=<str>] [--params-filter=<pydict>] [--params-generator=<pydict>] [--noframe] [--nopolaroid] [--border-size=<float>] [--border-color=<tuple>] [--alpha-blend=<f>]
egw --generator=<str> [-o=<fn>] [--template=<str>] [-config=<str>] [--filter=<str>] [--clockwise|--anticlock] [--title=<str>] [--title-meta] [-f=<f>] [-s=<n>] [-m=<w>] [--params-filter=<pydict>] [--params-generator=<pydict>] [--noframe] [--nopolaroid] [--border-size=<float>] [--border-color=<tuple>] [--alpha-blend=<f>]

Where:
  source-image    Name of the image file to convert.
Options:
  --alignment=<str> Used for cropping - specifies the portion of the image
                    to include in the final output.
                    One of 'top', 'left', 'bottom', 'right' or 'center'.
                    'top' and 'left' are synonomous as are 'bottom' and
                    'right'. (default="center").
                    Not of any use if --nocrop option is set.
  --anticlockwise   Rotate the image anti-clockwise before processing
  --alpha-blend=<float>
                    option to blend image into a template
                    value has a range of 0 to 1, for example "0.5".
                    (default=None)
  --border-size=<float>
                    optional and only valid in combination with --nopolaroid.
                    defines the percentage of borderspace around the image
                    example: 0.2 => a border of 20 percent of the image_size
                    will be added.
  --border-color=<tuple>
                    comma-seperated RGB values to set color for the border
                    (if any, means if --border-size is set).
                    default is: --border-color 255,255,255
  -c,--config=<py>  a config is only necessary if --template is used (see docs)
  --clockwise       Rotate the image clockwise before processing
  --crop            the images will be cropped to fit. see --alignment
  -f, --font=<f>    Specify (ttf-)font to use (full path!)
  --filter=<str>    One or more (seperated by comma) of
                    'ascii', 'ascii-color', 'pixelsort', 'diffuse', 'emboss',
                    'find_edge', 'glowing_edge', 'ice', 'molten', 'mosaic', ...
                    If more than one filter is used (filterchain) they will be applied in
                    the sequence given.
  --params-filter=<pydict>,<pypdict> set kwargs for filter(s)
  --generator=<str> Get phonky & create some generative art instead of using an input-image.
  --params-generator=<pydict> set kwargs for generator
  -s,--size-inner=<n> Size of the picture-part of the polaroid in pixels (default=800)

  -t,--title=<str>  Defines an optional caption to be displayed at the
                    bottom of the image. (default=None)
  --title-meta      Adds EXIF-data (date of capturing) to the title. If Input is
                    a generator this adds infos about the generator's params.
  -m,--max-size=<w> Sets maximum size (width) of the created polaroid.
                    (size-inner + frame <= max-size)
  --nocrop          Rescale the image to fit fullframe in the final output
                    (default="--crop"). btw. alignment is ignored if option is set.
  --noframe         put the processed image not into any frame. (ignores template etc.)
  --nopolaroid      put the processed image into a given template which doesn't have to be a polaroid
  -o, --output=<s>  Defines the name of the outputfile. If omitted a filename
                    based on the original will be used - example:
                    'test.polaroid.png' will be used as filename if input-file is 'test.png'
  --template=<t>    Specify a template to use. A template can be a high-res
                    scan of a real Polaroid or something of its shape.
                    By using a template the visual output quality gains on
                    expression & authenticity.

  -h, --help        Print this.
      --version     Print version.

The `latest version is available on github: https://github.com/s3h10r/einguteswerkzeug>
"""
import logging
from docopt import docopt
from einguteswerkzeug.core import __version__, main

log = logging.getLogger(__name__)
log.setLevel(logging.INFO)
handler = logging.StreamHandler() # console-handler
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
handler.setFormatter(formatter)
log.addHandler(handler)


if __name__ == '__main__':
    # --- process args & options
    args = docopt(__doc__, version=str('.'.join([str(el) for el in __version__])))
    main(args)
